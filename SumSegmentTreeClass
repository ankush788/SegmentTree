#include <iostream>
#include <vector>

class SegmentTree {
private:
    int n;
    std::vector<int> tree;

public:
    SegmentTree(int size) {
        n = size;
        tree.resize(4 * n + 1, 0);
    }

    void Built(int node, const std::vector<int>& arr, int start, int end) {
        if (start == end) {
            tree[node] = arr[start];
            return;
        }

        int mid = start + (end - start) / 2;
        Built(2 * node + 1, arr, start, mid);
        Built(2 * node + 2, arr, mid + 1, end);
        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];
    }

    int query(int node, int i, int j, int start, int end) {
        if (i > j || end < i || j < start) { // partial overlap
            return 0;
        }
        if (start <= i && end >= j) { // fully overlap
            return tree[node];
        }

        int mid = i + (j - i) / 2;

        int left = query(2 * node + 1, i, mid, start, end);
        int right = query(2 * node + 2, mid + 1, j, start, end);
        return (left + right);
    }

    void update(int node, int i, int j, int index, int value) {
        if (i == j) {
            if(i == index){
            tree[node] = value;
             }
            return;
        }

        int mid = i + (j - i) / 2;

        if (index <= mid) {
            update(2 * node + 1, i, mid, index, value);
        } else {
            update(2 * node + 2, mid + 1, j, index, value);
        }

        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];
    }
};

int main() {
    std::vector<int> arr = {1, 2, 3, 4, 5};
    int n = arr.size();

    SegmentTree st(n);
    st.Built(0, arr, 0, n - 1);

    // Query example
    std::cout << "Sum in range [1, 3]: " << st.query(0, 0, n - 1, 1, 3) << std::endl;

    // Update example
    st.update(0, 0, n - 1, 2, 6);

    // Query again after update
    std::cout << "Sum in range [1, 3]: " << st.query(0, 0, n - 1, 1, 3) << std::endl;

    return 0;
}
